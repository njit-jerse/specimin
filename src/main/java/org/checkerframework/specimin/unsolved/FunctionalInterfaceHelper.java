package org.checkerframework.specimin.unsolved;

import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Stream;
import org.checkerframework.checker.nullness.qual.Nullable;

public class FunctionalInterfaceHelper {
  /**
   * Converts any java.util.function functional interface to a "normal" functional interface, i.e.,
   * Runnable, Supplier, Consumer, Function, BiConsumer, BiFunction. BooleanSupplier is changed to
   * Supplier<Boolean>, DoubleToIntFunction to Function<Double, Integer>, etc.
   *
   * @param fqnSet The set of fully qualified names to convert
   * @return A new set with all functional interfaces converted to their "normal" forms
   */
  public static FullyQualifiedNameSet convertToNormalFunctionalInterface(
      FullyQualifiedNameSet fqnSet) {
    // See https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html
    String fqn = fqnSet.erasedFqns().iterator().next();

    if (!fqn.startsWith("java.util.function.")) {
      return fqnSet;
    }

    String name = fqn.substring("java.util.function.".length());

    // Autogenerated with GitHub Copilot using the contents from the link above
    return switch (name) {
      case "BinaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              Collections.nCopies(3, fqnSet.typeArguments().get(0)));
      case "BiPredicate" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              Stream.concat(
                      fqnSet.typeArguments().stream(),
                      Stream.of(new FullyQualifiedNameSet("java.lang.Boolean")))
                  .toList());
      case "BooleanSupplier" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Supplier"),
              List.of(new FullyQualifiedNameSet("java.lang.Boolean")));
      case "DoubleBinaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              Collections.nCopies(3, new FullyQualifiedNameSet("java.lang.Double")));
      case "DoubleConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Consumer"),
              List.of(new FullyQualifiedNameSet("java.lang.Double")));
      case "DoubleFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Double"), fqnSet.typeArguments().get(0)));
      case "DoublePredicate" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Double"),
                  new FullyQualifiedNameSet("java.lang.Boolean")));
      case "DoubleSupplier" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Supplier"),
              List.of(new FullyQualifiedNameSet("java.lang.Double")));
      case "DoubleToIntFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Double"),
                  new FullyQualifiedNameSet("java.lang.Integer")));
      case "DoubleToLongFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Double"),
                  new FullyQualifiedNameSet("java.lang.Long")));
      case "DoubleUnaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Double"),
                  new FullyQualifiedNameSet("java.lang.Double")));
      case "IntBinaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              Collections.nCopies(3, new FullyQualifiedNameSet("java.lang.Integer")));
      case "IntConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Consumer"),
              List.of(new FullyQualifiedNameSet("java.lang.Integer")));
      case "IntFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Integer"), fqnSet.typeArguments().get(0)));
      case "IntPredicate" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Integer"),
                  new FullyQualifiedNameSet("java.lang.Boolean")));
      case "IntSupplier" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Supplier"),
              List.of(new FullyQualifiedNameSet("java.lang.Integer")));
      case "IntToDoubleFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Integer"),
                  new FullyQualifiedNameSet("java.lang.Double")));
      case "IntToLongFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Integer"),
                  new FullyQualifiedNameSet("java.lang.Long")));
      case "IntUnaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Integer"),
                  new FullyQualifiedNameSet("java.lang.Integer")));
      case "LongBinaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              Collections.nCopies(3, new FullyQualifiedNameSet("java.lang.Long")));
      case "LongConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Consumer"),
              List.of(new FullyQualifiedNameSet("java.lang.Long")));
      case "LongFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(new FullyQualifiedNameSet("java.lang.Long"), fqnSet.typeArguments().get(0)));
      case "LongPredicate" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Long"),
                  new FullyQualifiedNameSet("java.lang.Boolean")));
      case "LongSupplier" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Supplier"),
              List.of(new FullyQualifiedNameSet("java.lang.Long")));
      case "LongToDoubleFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Long"),
                  new FullyQualifiedNameSet("java.lang.Double")));
      case "LongToIntFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Long"),
                  new FullyQualifiedNameSet("java.lang.Integer")));
      case "LongUnaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  new FullyQualifiedNameSet("java.lang.Long"),
                  new FullyQualifiedNameSet("java.lang.Long")));
      case "ObjDoubleConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiConsumer"),
              List.of(
                  fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Double")));
      case "ObjIntConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiConsumer"),
              List.of(
                  fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Integer")));
      case "ObjLongConsumer" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiConsumer"),
              List.of(fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Long")));
      case "Predicate" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Boolean")));
      case "ToDoubleBiFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              List.of(
                  fqnSet.typeArguments().get(0),
                  fqnSet.typeArguments().get(1),
                  new FullyQualifiedNameSet("java.lang.Double")));
      case "ToDoubleFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Double")));
      case "ToIntBiFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              List.of(
                  fqnSet.typeArguments().get(0),
                  fqnSet.typeArguments().get(1),
                  new FullyQualifiedNameSet("java.lang.Integer")));
      case "ToIntFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(
                  fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Integer")));
      case "ToLongBiFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.BiFunction"),
              List.of(
                  fqnSet.typeArguments().get(0),
                  fqnSet.typeArguments().get(1),
                  new FullyQualifiedNameSet("java.lang.Long")));
      case "ToLongFunction" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(fqnSet.typeArguments().get(0), new FullyQualifiedNameSet("java.lang.Long")));
      case "UnaryOperator" ->
          new FullyQualifiedNameSet(
              Set.of("java.util.function.Function"),
              List.of(fqnSet.typeArguments().get(0), fqnSet.typeArguments().get(0)));
      default -> fqnSet;
    };
  }

  /**
   * Given a normalized functional interface from {@link
   * #convertToNormalFunctionalInterface(FullyQualifiedNameSet)}, get the return type of the
   * functional method. Returns null if void.
   *
   * @param normalized The normalized functional interface
   * @return The return type of the functional method, or null if void
   */
  public static @Nullable FullyQualifiedNameSet getReturnTypeFromNormalizedFunctionalInterface(
      FullyQualifiedNameSet normalized) {
    String fqn = normalized.erasedFqns().iterator().next();

    if (fqn.equals("java.util.function.Supplier")
        || fqn.equals("java.util.function.Function")
        || fqn.equals("java.util.function.BiFunction")) {
      List<FullyQualifiedNameSet> typeArgs = normalized.typeArguments();
      if (!typeArgs.isEmpty()) {
        return typeArgs.get(typeArgs.size() - 1);
      }
    }

    return null;
  }
}
